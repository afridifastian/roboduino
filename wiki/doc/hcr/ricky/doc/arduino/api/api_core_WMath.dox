/**
\file WMath.cpp

*/

/**
\fn void randomSeed(unsigned int seed)
\brief 设置随机种子

可以用当前时间作为随机种子. 随机种子的设置对产生的随机序列有影响.

\param seed 随机种子
*/

/**
\fn long random(long howbig)
\brief 生成随机数

生成[0, howbig-1]范围的随机数.

\param howbig 最大值
*/

/**
\fn long random(long howsmall, long howbig)
\brief 生成随机数

生成[howsmall, howbig-1]范围的随机数.

\param howsmall 最小值
\param howbig   最大值
*/

/**
\fn long map(long x, long in_min, long in_max, long out_min, long out_max)
\brief 等比映射

将位于[in_min, in_max]之间的x映射到[out_min, out_max].

\param x       要映射的值
\param in_min  映射前区间
\param in_max  映射前区间
\param out_min 映射后区间
\param out_max 映射后区间

Re-maps a number from one range to another. That is, a value of fromLow would get mapped to toLow, a value of fromHigh to toHigh, values in-between to values in-between, etc.

Does not constrain values to within the range, because out-of-range values are sometimes intended and useful. The constrain() function may be used either before or after this function, if limits to the ranges are desired.

Note that the "lower bounds" of either range may be larger or smaller than the "upper bounds" so the map() function may be used to reverse a range of numbers, for example

y = map(x, 1, 50, 50, 1);

The function also handles negative numbers well, so that this example

y = map(x, 1, 50, 50, -100);

is also valid and works well.

The map() function uses integer math so will not generate fractions, when the math might indicate that it should do so. Fractional remainders are truncated, and are not rounded or averaged.

Parameters

value: the number to map

fromLow: the lower bound of the value's current range

fromHigh: the upper bound of the value's current range

toLow: the lower bound of the value's target range

toHigh: the upper bound of the value's target range

Returns

The mapped value.

Example

\code
// Map an analog value to 8 bits (0 to 255)
void setup() {}

void loop()
{
  int val = analogRead(0);
  val = map(val, 0, 1023, 0, 255);
  analogWrite(9, val);
}
\endcode

Appendix

For the mathematically inclined, here's the whole function

\code
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
\endcode
*/

/**
\fn unsigned int makeWord (unsigned int w)
\brief 构造一个字
\fn unsigned int makeWord (unsigned char h, unsigned char l)
\brief 构造一个字
*/